# -*- coding: utf-8 -*-
"""Data_Warehouse.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CW1-0COYuks5e6VszOspEr-16XunKiz3
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sqlite3

users_df = pd.read_csv("/content/users_data.csv")
products_df = pd.read_csv("/content/products_data.csv")
orders_df = pd.read_csv("/content/orders_data.csv")
reviews_df = pd.read_csv("/content//reviews_data.csv")

# 2.1 Extract Data

users_df = pd.read_csv("/content/users_data.csv")
products_df = pd.read_csv("/content/products_data.csv")
orders_df = pd.read_csv("/content//orders_data.csv")
reviews_df = pd.read_csv("/content/reviews_data.csv")

# 2.2 Transform Data

# Adding 'order_value' column to orders_df
orders_df = orders_df.merge(products_df[['product_id', 'price']], on='product_id', how='left')
orders_df['order_value'] = orders_df['quantity'] * orders_df['price']

# 2.3 Load Data into SQLite

conn = sqlite3.connect('/content/ecommerce_data_warehouse.db')
users_df.to_sql('users', conn, if_exists='replace', index=False)
products_df.to_sql('products', conn, if_exists='replace', index=False)
orders_df.to_sql('orders', conn, if_exists='replace', index=False)
reviews_df.to_sql('reviews', conn, if_exists='replace', index=False)

'/content/ecommerce_data_warehouse.db'

# 3.1 Top 5 Selling Products

top_selling_query = """
SELECT p.product_name, SUM(o.quantity) as total_sold
FROM orders o
JOIN products p ON o.product_id = p.product_id
GROUP BY p.product_name
ORDER BY total_sold DESC
LIMIT 5
"""

top_selling_products = pd.read_sql_query(top_selling_query, conn)

# 3.2 Active Users (users who have placed more than 5 orders)

active_users_query = """
SELECT u.user_name, COUNT(DISTINCT o.order_id) as order_count
FROM users u
JOIN orders o ON u.user_id = o.user_id
GROUP BY u.user_name
HAVING order_count > 5
"""

active_users = pd.read_sql_query(active_users_query, conn)

# 3.3 Average Review Score for Products

average_review_query = """
SELECT p.product_name, AVG(r.rating) as avg_rating
FROM products p
JOIN reviews r ON p.product_id = r.product_id
GROUP BY p.product_name
ORDER BY avg_rating DESC
"""

average_reviews = pd.read_sql_query(average_review_query, conn)

top_selling_products, active_users, average_reviews.head()  # Displaying top records for average reviews

